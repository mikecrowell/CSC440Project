#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DigitalAssetManagementSep28
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="csc440_fall2012_team2")]
	public partial class LinqToAllDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAPPUSER(APPUSER instance);
    partial void UpdateAPPUSER(APPUSER instance);
    partial void DeleteAPPUSER(APPUSER instance);
    partial void InsertCATEGORY(CATEGORY instance);
    partial void UpdateCATEGORY(CATEGORY instance);
    partial void DeleteCATEGORY(CATEGORY instance);
    partial void InsertEXTENSION(EXTENSION instance);
    partial void UpdateEXTENSION(EXTENSION instance);
    partial void DeleteEXTENSION(EXTENSION instance);
    partial void InsertFILE_TAG(FILE_TAG instance);
    partial void UpdateFILE_TAG(FILE_TAG instance);
    partial void DeleteFILE_TAG(FILE_TAG instance);
    partial void InsertTRANSACTIONTYPE(TRANSACTIONTYPE instance);
    partial void UpdateTRANSACTIONTYPE(TRANSACTIONTYPE instance);
    partial void DeleteTRANSACTIONTYPE(TRANSACTIONTYPE instance);
    partial void InsertUSER_ACCESS(USER_ACCESS instance);
    partial void UpdateUSER_ACCESS(USER_ACCESS instance);
    partial void DeleteUSER_ACCESS(USER_ACCESS instance);
    partial void InsertTEST_DUC(TEST_DUC instance);
    partial void UpdateTEST_DUC(TEST_DUC instance);
    partial void DeleteTEST_DUC(TEST_DUC instance);
    partial void InsertFILELOG(FILELOG instance);
    partial void UpdateFILELOG(FILELOG instance);
    partial void DeleteFILELOG(FILELOG instance);
    partial void InsertTAG(TAG instance);
    partial void UpdateTAG(TAG instance);
    partial void DeleteTAG(TAG instance);
    partial void InsertDATAFILE(DATAFILE instance);
    partial void UpdateDATAFILE(DATAFILE instance);
    partial void DeleteDATAFILE(DATAFILE instance);
    #endregion
		
		public LinqToAllDataDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["csc440_fall2012_team2ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToAllDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToAllDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToAllDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToAllDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<APPUSER> APPUSERs
		{
			get
			{
				return this.GetTable<APPUSER>();
			}
		}
		
		public System.Data.Linq.Table<CATEGORY> CATEGORies
		{
			get
			{
				return this.GetTable<CATEGORY>();
			}
		}
		
		public System.Data.Linq.Table<EXTENSION> EXTENSIONs
		{
			get
			{
				return this.GetTable<EXTENSION>();
			}
		}
		
		public System.Data.Linq.Table<FILE_TAG> FILE_TAGs
		{
			get
			{
				return this.GetTable<FILE_TAG>();
			}
		}
		
		public System.Data.Linq.Table<TRANSACTIONTYPE> TRANSACTIONTYPEs
		{
			get
			{
				return this.GetTable<TRANSACTIONTYPE>();
			}
		}
		
		public System.Data.Linq.Table<USER_ACCESS> USER_ACCESSes
		{
			get
			{
				return this.GetTable<USER_ACCESS>();
			}
		}
		
		public System.Data.Linq.Table<TEST_DUC> TEST_DUCs
		{
			get
			{
				return this.GetTable<TEST_DUC>();
			}
		}
		
		public System.Data.Linq.Table<FILELOG> FILELOGs
		{
			get
			{
				return this.GetTable<FILELOG>();
			}
		}
		
		public System.Data.Linq.Table<TAG> TAGs
		{
			get
			{
				return this.GetTable<TAG>();
			}
		}
		
		public System.Data.Linq.Table<DATAFILE> DATAFILEs
		{
			get
			{
				return this.GetTable<DATAFILE>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.APPUSER")]
	public partial class APPUSER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _APPUSER_ID;
		
		private string _FIRST_NAME;
		
		private string _LAST_NAME;
		
		private string _USER_LOGIN;
		
		private string _USER_PASSWORD;
		
		private bool _IS_ADMINISTRATOR;
		
		private bool _IS_ACTIVE;
		
		private EntitySet<USER_ACCESS> _USER_ACCESSes;
		
		private EntitySet<FILELOG> _FILELOGs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAPPUSER_IDChanging(int value);
    partial void OnAPPUSER_IDChanged();
    partial void OnFIRST_NAMEChanging(string value);
    partial void OnFIRST_NAMEChanged();
    partial void OnLAST_NAMEChanging(string value);
    partial void OnLAST_NAMEChanged();
    partial void OnUSER_LOGINChanging(string value);
    partial void OnUSER_LOGINChanged();
    partial void OnUSER_PASSWORDChanging(string value);
    partial void OnUSER_PASSWORDChanged();
    partial void OnIS_ADMINISTRATORChanging(bool value);
    partial void OnIS_ADMINISTRATORChanged();
    partial void OnIS_ACTIVEChanging(bool value);
    partial void OnIS_ACTIVEChanged();
    #endregion
		
		public APPUSER()
		{
			this._USER_ACCESSes = new EntitySet<USER_ACCESS>(new Action<USER_ACCESS>(this.attach_USER_ACCESSes), new Action<USER_ACCESS>(this.detach_USER_ACCESSes));
			this._FILELOGs = new EntitySet<FILELOG>(new Action<FILELOG>(this.attach_FILELOGs), new Action<FILELOG>(this.detach_FILELOGs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_APPUSER_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int APPUSER_ID
		{
			get
			{
				return this._APPUSER_ID;
			}
			set
			{
				if ((this._APPUSER_ID != value))
				{
					this.OnAPPUSER_IDChanging(value);
					this.SendPropertyChanging();
					this._APPUSER_ID = value;
					this.SendPropertyChanged("APPUSER_ID");
					this.OnAPPUSER_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FIRST_NAME", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FIRST_NAME
		{
			get
			{
				return this._FIRST_NAME;
			}
			set
			{
				if ((this._FIRST_NAME != value))
				{
					this.OnFIRST_NAMEChanging(value);
					this.SendPropertyChanging();
					this._FIRST_NAME = value;
					this.SendPropertyChanged("FIRST_NAME");
					this.OnFIRST_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LAST_NAME", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LAST_NAME
		{
			get
			{
				return this._LAST_NAME;
			}
			set
			{
				if ((this._LAST_NAME != value))
				{
					this.OnLAST_NAMEChanging(value);
					this.SendPropertyChanging();
					this._LAST_NAME = value;
					this.SendPropertyChanged("LAST_NAME");
					this.OnLAST_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_USER_LOGIN", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string USER_LOGIN
		{
			get
			{
				return this._USER_LOGIN;
			}
			set
			{
				if ((this._USER_LOGIN != value))
				{
					this.OnUSER_LOGINChanging(value);
					this.SendPropertyChanging();
					this._USER_LOGIN = value;
					this.SendPropertyChanged("USER_LOGIN");
					this.OnUSER_LOGINChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_USER_PASSWORD", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string USER_PASSWORD
		{
			get
			{
				return this._USER_PASSWORD;
			}
			set
			{
				if ((this._USER_PASSWORD != value))
				{
					this.OnUSER_PASSWORDChanging(value);
					this.SendPropertyChanging();
					this._USER_PASSWORD = value;
					this.SendPropertyChanged("USER_PASSWORD");
					this.OnUSER_PASSWORDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IS_ADMINISTRATOR", DbType="Bit NOT NULL")]
		public bool IS_ADMINISTRATOR
		{
			get
			{
				return this._IS_ADMINISTRATOR;
			}
			set
			{
				if ((this._IS_ADMINISTRATOR != value))
				{
					this.OnIS_ADMINISTRATORChanging(value);
					this.SendPropertyChanging();
					this._IS_ADMINISTRATOR = value;
					this.SendPropertyChanged("IS_ADMINISTRATOR");
					this.OnIS_ADMINISTRATORChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IS_ACTIVE", DbType="Bit NOT NULL")]
		public bool IS_ACTIVE
		{
			get
			{
				return this._IS_ACTIVE;
			}
			set
			{
				if ((this._IS_ACTIVE != value))
				{
					this.OnIS_ACTIVEChanging(value);
					this.SendPropertyChanging();
					this._IS_ACTIVE = value;
					this.SendPropertyChanged("IS_ACTIVE");
					this.OnIS_ACTIVEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="APPUSER_USER_ACCESS", Storage="_USER_ACCESSes", ThisKey="APPUSER_ID", OtherKey="APPUSER_ID")]
		public EntitySet<USER_ACCESS> USER_ACCESSes
		{
			get
			{
				return this._USER_ACCESSes;
			}
			set
			{
				this._USER_ACCESSes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="APPUSER_FILELOG", Storage="_FILELOGs", ThisKey="APPUSER_ID", OtherKey="APPUSER_ID")]
		public EntitySet<FILELOG> FILELOGs
		{
			get
			{
				return this._FILELOGs;
			}
			set
			{
				this._FILELOGs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_USER_ACCESSes(USER_ACCESS entity)
		{
			this.SendPropertyChanging();
			entity.APPUSER = this;
		}
		
		private void detach_USER_ACCESSes(USER_ACCESS entity)
		{
			this.SendPropertyChanging();
			entity.APPUSER = null;
		}
		
		private void attach_FILELOGs(FILELOG entity)
		{
			this.SendPropertyChanging();
			entity.APPUSER = this;
		}
		
		private void detach_FILELOGs(FILELOG entity)
		{
			this.SendPropertyChanging();
			entity.APPUSER = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CATEGORY")]
	public partial class CATEGORY : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CATEGORY_ID;
		
		private string _CATEGORY_NAME;
		
		private string _CATEGORY_DESC;
		
		private EntitySet<EXTENSION> _EXTENSIONs;
		
		private EntitySet<USER_ACCESS> _USER_ACCESSes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCATEGORY_IDChanging(int value);
    partial void OnCATEGORY_IDChanged();
    partial void OnCATEGORY_NAMEChanging(string value);
    partial void OnCATEGORY_NAMEChanged();
    partial void OnCATEGORY_DESCChanging(string value);
    partial void OnCATEGORY_DESCChanged();
    #endregion
		
		public CATEGORY()
		{
			this._EXTENSIONs = new EntitySet<EXTENSION>(new Action<EXTENSION>(this.attach_EXTENSIONs), new Action<EXTENSION>(this.detach_EXTENSIONs));
			this._USER_ACCESSes = new EntitySet<USER_ACCESS>(new Action<USER_ACCESS>(this.attach_USER_ACCESSes), new Action<USER_ACCESS>(this.detach_USER_ACCESSes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CATEGORY_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CATEGORY_ID
		{
			get
			{
				return this._CATEGORY_ID;
			}
			set
			{
				if ((this._CATEGORY_ID != value))
				{
					this.OnCATEGORY_IDChanging(value);
					this.SendPropertyChanging();
					this._CATEGORY_ID = value;
					this.SendPropertyChanged("CATEGORY_ID");
					this.OnCATEGORY_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CATEGORY_NAME", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CATEGORY_NAME
		{
			get
			{
				return this._CATEGORY_NAME;
			}
			set
			{
				if ((this._CATEGORY_NAME != value))
				{
					this.OnCATEGORY_NAMEChanging(value);
					this.SendPropertyChanging();
					this._CATEGORY_NAME = value;
					this.SendPropertyChanged("CATEGORY_NAME");
					this.OnCATEGORY_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CATEGORY_DESC", DbType="VarChar(MAX)")]
		public string CATEGORY_DESC
		{
			get
			{
				return this._CATEGORY_DESC;
			}
			set
			{
				if ((this._CATEGORY_DESC != value))
				{
					this.OnCATEGORY_DESCChanging(value);
					this.SendPropertyChanging();
					this._CATEGORY_DESC = value;
					this.SendPropertyChanged("CATEGORY_DESC");
					this.OnCATEGORY_DESCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CATEGORY_EXTENSION", Storage="_EXTENSIONs", ThisKey="CATEGORY_ID", OtherKey="CATEGORY_ID")]
		public EntitySet<EXTENSION> EXTENSIONs
		{
			get
			{
				return this._EXTENSIONs;
			}
			set
			{
				this._EXTENSIONs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CATEGORY_USER_ACCESS", Storage="_USER_ACCESSes", ThisKey="CATEGORY_ID", OtherKey="CATEGORY_ID")]
		public EntitySet<USER_ACCESS> USER_ACCESSes
		{
			get
			{
				return this._USER_ACCESSes;
			}
			set
			{
				this._USER_ACCESSes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EXTENSIONs(EXTENSION entity)
		{
			this.SendPropertyChanging();
			entity.CATEGORY = this;
		}
		
		private void detach_EXTENSIONs(EXTENSION entity)
		{
			this.SendPropertyChanging();
			entity.CATEGORY = null;
		}
		
		private void attach_USER_ACCESSes(USER_ACCESS entity)
		{
			this.SendPropertyChanging();
			entity.CATEGORY = this;
		}
		
		private void detach_USER_ACCESSes(USER_ACCESS entity)
		{
			this.SendPropertyChanging();
			entity.CATEGORY = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EXTENSION")]
	public partial class EXTENSION : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EXTENSION_ID;
		
		private string _FILE_EXTENSION;
		
		private string _EXTENSION_DESC;
		
		private int _CATEGORY_ID;
		
		private EntityRef<DATAFILE> _DATAFILE;
		
		private EntityRef<CATEGORY> _CATEGORY;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEXTENSION_IDChanging(int value);
    partial void OnEXTENSION_IDChanged();
    partial void OnFILE_EXTENSIONChanging(string value);
    partial void OnFILE_EXTENSIONChanged();
    partial void OnEXTENSION_DESCChanging(string value);
    partial void OnEXTENSION_DESCChanged();
    partial void OnCATEGORY_IDChanging(int value);
    partial void OnCATEGORY_IDChanged();
    #endregion
		
		public EXTENSION()
		{
			this._DATAFILE = default(EntityRef<DATAFILE>);
			this._CATEGORY = default(EntityRef<CATEGORY>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EXTENSION_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EXTENSION_ID
		{
			get
			{
				return this._EXTENSION_ID;
			}
			set
			{
				if ((this._EXTENSION_ID != value))
				{
					this.OnEXTENSION_IDChanging(value);
					this.SendPropertyChanging();
					this._EXTENSION_ID = value;
					this.SendPropertyChanged("EXTENSION_ID");
					this.OnEXTENSION_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FILE_EXTENSION", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string FILE_EXTENSION
		{
			get
			{
				return this._FILE_EXTENSION;
			}
			set
			{
				if ((this._FILE_EXTENSION != value))
				{
					this.OnFILE_EXTENSIONChanging(value);
					this.SendPropertyChanging();
					this._FILE_EXTENSION = value;
					this.SendPropertyChanged("FILE_EXTENSION");
					this.OnFILE_EXTENSIONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EXTENSION_DESC", DbType="VarChar(50)")]
		public string EXTENSION_DESC
		{
			get
			{
				return this._EXTENSION_DESC;
			}
			set
			{
				if ((this._EXTENSION_DESC != value))
				{
					this.OnEXTENSION_DESCChanging(value);
					this.SendPropertyChanging();
					this._EXTENSION_DESC = value;
					this.SendPropertyChanged("EXTENSION_DESC");
					this.OnEXTENSION_DESCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CATEGORY_ID", DbType="Int NOT NULL")]
		public int CATEGORY_ID
		{
			get
			{
				return this._CATEGORY_ID;
			}
			set
			{
				if ((this._CATEGORY_ID != value))
				{
					if (this._CATEGORY.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCATEGORY_IDChanging(value);
					this.SendPropertyChanging();
					this._CATEGORY_ID = value;
					this.SendPropertyChanged("CATEGORY_ID");
					this.OnCATEGORY_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EXTENSION_DATAFILE", Storage="_DATAFILE", ThisKey="EXTENSION_ID", OtherKey="DF_ID", IsUnique=true, IsForeignKey=false)]
		public DATAFILE DATAFILE
		{
			get
			{
				return this._DATAFILE.Entity;
			}
			set
			{
				DATAFILE previousValue = this._DATAFILE.Entity;
				if (((previousValue != value) 
							|| (this._DATAFILE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DATAFILE.Entity = null;
						previousValue.EXTENSION = null;
					}
					this._DATAFILE.Entity = value;
					if ((value != null))
					{
						value.EXTENSION = this;
					}
					this.SendPropertyChanged("DATAFILE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CATEGORY_EXTENSION", Storage="_CATEGORY", ThisKey="CATEGORY_ID", OtherKey="CATEGORY_ID", IsForeignKey=true)]
		public CATEGORY CATEGORY
		{
			get
			{
				return this._CATEGORY.Entity;
			}
			set
			{
				CATEGORY previousValue = this._CATEGORY.Entity;
				if (((previousValue != value) 
							|| (this._CATEGORY.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CATEGORY.Entity = null;
						previousValue.EXTENSIONs.Remove(this);
					}
					this._CATEGORY.Entity = value;
					if ((value != null))
					{
						value.EXTENSIONs.Add(this);
						this._CATEGORY_ID = value.CATEGORY_ID;
					}
					else
					{
						this._CATEGORY_ID = default(int);
					}
					this.SendPropertyChanged("CATEGORY");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FILE_TAG")]
	public partial class FILE_TAG : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TAG_ID;
		
		private int _DF_ID;
		
		private EntityRef<TAG> _TAG;
		
		private EntityRef<DATAFILE> _DATAFILE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTAG_IDChanging(int value);
    partial void OnTAG_IDChanged();
    partial void OnDF_IDChanging(int value);
    partial void OnDF_IDChanged();
    #endregion
		
		public FILE_TAG()
		{
			this._TAG = default(EntityRef<TAG>);
			this._DATAFILE = default(EntityRef<DATAFILE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TAG_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TAG_ID
		{
			get
			{
				return this._TAG_ID;
			}
			set
			{
				if ((this._TAG_ID != value))
				{
					if (this._TAG.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTAG_IDChanging(value);
					this.SendPropertyChanging();
					this._TAG_ID = value;
					this.SendPropertyChanged("TAG_ID");
					this.OnTAG_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DF_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DF_ID
		{
			get
			{
				return this._DF_ID;
			}
			set
			{
				if ((this._DF_ID != value))
				{
					if (this._DATAFILE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDF_IDChanging(value);
					this.SendPropertyChanging();
					this._DF_ID = value;
					this.SendPropertyChanged("DF_ID");
					this.OnDF_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TAG_FILE_TAG", Storage="_TAG", ThisKey="TAG_ID", OtherKey="TAG_ID", IsForeignKey=true)]
		public TAG TAG
		{
			get
			{
				return this._TAG.Entity;
			}
			set
			{
				TAG previousValue = this._TAG.Entity;
				if (((previousValue != value) 
							|| (this._TAG.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TAG.Entity = null;
						previousValue.FILE_TAGs.Remove(this);
					}
					this._TAG.Entity = value;
					if ((value != null))
					{
						value.FILE_TAGs.Add(this);
						this._TAG_ID = value.TAG_ID;
					}
					else
					{
						this._TAG_ID = default(int);
					}
					this.SendPropertyChanged("TAG");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DATAFILE_FILE_TAG", Storage="_DATAFILE", ThisKey="DF_ID", OtherKey="DF_ID", IsForeignKey=true)]
		public DATAFILE DATAFILE
		{
			get
			{
				return this._DATAFILE.Entity;
			}
			set
			{
				DATAFILE previousValue = this._DATAFILE.Entity;
				if (((previousValue != value) 
							|| (this._DATAFILE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DATAFILE.Entity = null;
						previousValue.FILE_TAGs.Remove(this);
					}
					this._DATAFILE.Entity = value;
					if ((value != null))
					{
						value.FILE_TAGs.Add(this);
						this._DF_ID = value.DF_ID;
					}
					else
					{
						this._DF_ID = default(int);
					}
					this.SendPropertyChanged("DATAFILE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TRANSACTIONTYPE")]
	public partial class TRANSACTIONTYPE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TTYPE_ID;
		
		private string _TTYPE_NAME;
		
		private string _TTYPE_DESC;
		
		private EntitySet<FILELOG> _FILELOGs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTTYPE_IDChanging(int value);
    partial void OnTTYPE_IDChanged();
    partial void OnTTYPE_NAMEChanging(string value);
    partial void OnTTYPE_NAMEChanged();
    partial void OnTTYPE_DESCChanging(string value);
    partial void OnTTYPE_DESCChanged();
    #endregion
		
		public TRANSACTIONTYPE()
		{
			this._FILELOGs = new EntitySet<FILELOG>(new Action<FILELOG>(this.attach_FILELOGs), new Action<FILELOG>(this.detach_FILELOGs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TTYPE_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TTYPE_ID
		{
			get
			{
				return this._TTYPE_ID;
			}
			set
			{
				if ((this._TTYPE_ID != value))
				{
					this.OnTTYPE_IDChanging(value);
					this.SendPropertyChanging();
					this._TTYPE_ID = value;
					this.SendPropertyChanged("TTYPE_ID");
					this.OnTTYPE_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TTYPE_NAME", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TTYPE_NAME
		{
			get
			{
				return this._TTYPE_NAME;
			}
			set
			{
				if ((this._TTYPE_NAME != value))
				{
					this.OnTTYPE_NAMEChanging(value);
					this.SendPropertyChanging();
					this._TTYPE_NAME = value;
					this.SendPropertyChanged("TTYPE_NAME");
					this.OnTTYPE_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TTYPE_DESC", DbType="VarChar(50)")]
		public string TTYPE_DESC
		{
			get
			{
				return this._TTYPE_DESC;
			}
			set
			{
				if ((this._TTYPE_DESC != value))
				{
					this.OnTTYPE_DESCChanging(value);
					this.SendPropertyChanging();
					this._TTYPE_DESC = value;
					this.SendPropertyChanged("TTYPE_DESC");
					this.OnTTYPE_DESCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TRANSACTIONTYPE_FILELOG", Storage="_FILELOGs", ThisKey="TTYPE_ID", OtherKey="TTYPE_ID")]
		public EntitySet<FILELOG> FILELOGs
		{
			get
			{
				return this._FILELOGs;
			}
			set
			{
				this._FILELOGs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FILELOGs(FILELOG entity)
		{
			this.SendPropertyChanging();
			entity.TRANSACTIONTYPE = this;
		}
		
		private void detach_FILELOGs(FILELOG entity)
		{
			this.SendPropertyChanging();
			entity.TRANSACTIONTYPE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.USER_ACCESS")]
	public partial class USER_ACCESS : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CATEGORY_ID;
		
		private int _APPUSER_ID;
		
		private EntityRef<CATEGORY> _CATEGORY;
		
		private EntityRef<APPUSER> _APPUSER;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCATEGORY_IDChanging(int value);
    partial void OnCATEGORY_IDChanged();
    partial void OnAPPUSER_IDChanging(int value);
    partial void OnAPPUSER_IDChanged();
    #endregion
		
		public USER_ACCESS()
		{
			this._CATEGORY = default(EntityRef<CATEGORY>);
			this._APPUSER = default(EntityRef<APPUSER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CATEGORY_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CATEGORY_ID
		{
			get
			{
				return this._CATEGORY_ID;
			}
			set
			{
				if ((this._CATEGORY_ID != value))
				{
					if (this._CATEGORY.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCATEGORY_IDChanging(value);
					this.SendPropertyChanging();
					this._CATEGORY_ID = value;
					this.SendPropertyChanged("CATEGORY_ID");
					this.OnCATEGORY_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_APPUSER_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int APPUSER_ID
		{
			get
			{
				return this._APPUSER_ID;
			}
			set
			{
				if ((this._APPUSER_ID != value))
				{
					if (this._APPUSER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAPPUSER_IDChanging(value);
					this.SendPropertyChanging();
					this._APPUSER_ID = value;
					this.SendPropertyChanged("APPUSER_ID");
					this.OnAPPUSER_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CATEGORY_USER_ACCESS", Storage="_CATEGORY", ThisKey="CATEGORY_ID", OtherKey="CATEGORY_ID", IsForeignKey=true)]
		public CATEGORY CATEGORY
		{
			get
			{
				return this._CATEGORY.Entity;
			}
			set
			{
				CATEGORY previousValue = this._CATEGORY.Entity;
				if (((previousValue != value) 
							|| (this._CATEGORY.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CATEGORY.Entity = null;
						previousValue.USER_ACCESSes.Remove(this);
					}
					this._CATEGORY.Entity = value;
					if ((value != null))
					{
						value.USER_ACCESSes.Add(this);
						this._CATEGORY_ID = value.CATEGORY_ID;
					}
					else
					{
						this._CATEGORY_ID = default(int);
					}
					this.SendPropertyChanged("CATEGORY");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="APPUSER_USER_ACCESS", Storage="_APPUSER", ThisKey="APPUSER_ID", OtherKey="APPUSER_ID", IsForeignKey=true)]
		public APPUSER APPUSER
		{
			get
			{
				return this._APPUSER.Entity;
			}
			set
			{
				APPUSER previousValue = this._APPUSER.Entity;
				if (((previousValue != value) 
							|| (this._APPUSER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._APPUSER.Entity = null;
						previousValue.USER_ACCESSes.Remove(this);
					}
					this._APPUSER.Entity = value;
					if ((value != null))
					{
						value.USER_ACCESSes.Add(this);
						this._APPUSER_ID = value.APPUSER_ID;
					}
					else
					{
						this._APPUSER_ID = default(int);
					}
					this.SendPropertyChanged("APPUSER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TEST_DUC")]
	public partial class TEST_DUC : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _File_ID;
		
		private string _File_FullName;
		
		private string _File_Name;
		
		private string _File_Ext;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFile_IDChanging(int value);
    partial void OnFile_IDChanged();
    partial void OnFile_FullNameChanging(string value);
    partial void OnFile_FullNameChanged();
    partial void OnFile_NameChanging(string value);
    partial void OnFile_NameChanged();
    partial void OnFile_ExtChanging(string value);
    partial void OnFile_ExtChanged();
    #endregion
		
		public TEST_DUC()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_File_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int File_ID
		{
			get
			{
				return this._File_ID;
			}
			set
			{
				if ((this._File_ID != value))
				{
					this.OnFile_IDChanging(value);
					this.SendPropertyChanging();
					this._File_ID = value;
					this.SendPropertyChanged("File_ID");
					this.OnFile_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_File_FullName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string File_FullName
		{
			get
			{
				return this._File_FullName;
			}
			set
			{
				if ((this._File_FullName != value))
				{
					this.OnFile_FullNameChanging(value);
					this.SendPropertyChanging();
					this._File_FullName = value;
					this.SendPropertyChanged("File_FullName");
					this.OnFile_FullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_File_Name", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string File_Name
		{
			get
			{
				return this._File_Name;
			}
			set
			{
				if ((this._File_Name != value))
				{
					this.OnFile_NameChanging(value);
					this.SendPropertyChanging();
					this._File_Name = value;
					this.SendPropertyChanged("File_Name");
					this.OnFile_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_File_Ext", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string File_Ext
		{
			get
			{
				return this._File_Ext;
			}
			set
			{
				if ((this._File_Ext != value))
				{
					this.OnFile_ExtChanging(value);
					this.SendPropertyChanging();
					this._File_Ext = value;
					this.SendPropertyChanged("File_Ext");
					this.OnFile_ExtChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FILELOG")]
	public partial class FILELOG : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FILELOG_ID;
		
		private int _DF_ID;
		
		private int _APPUSER_ID;
		
		private System.DateTime _LOG_DATE;
		
		private System.DateTime _LOG_TIME;
		
		private int _TTYPE_ID;
		
		private EntityRef<APPUSER> _APPUSER;
		
		private EntityRef<TRANSACTIONTYPE> _TRANSACTIONTYPE;
		
		private EntityRef<DATAFILE> _DATAFILE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFILELOG_IDChanging(int value);
    partial void OnFILELOG_IDChanged();
    partial void OnDF_IDChanging(int value);
    partial void OnDF_IDChanged();
    partial void OnAPPUSER_IDChanging(int value);
    partial void OnAPPUSER_IDChanged();
    partial void OnLOG_DATEChanging(System.DateTime value);
    partial void OnLOG_DATEChanged();
    partial void OnLOG_TIMEChanging(System.DateTime value);
    partial void OnLOG_TIMEChanged();
    partial void OnTTYPE_IDChanging(int value);
    partial void OnTTYPE_IDChanged();
    #endregion
		
		public FILELOG()
		{
			this._APPUSER = default(EntityRef<APPUSER>);
			this._TRANSACTIONTYPE = default(EntityRef<TRANSACTIONTYPE>);
			this._DATAFILE = default(EntityRef<DATAFILE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FILELOG_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FILELOG_ID
		{
			get
			{
				return this._FILELOG_ID;
			}
			set
			{
				if ((this._FILELOG_ID != value))
				{
					this.OnFILELOG_IDChanging(value);
					this.SendPropertyChanging();
					this._FILELOG_ID = value;
					this.SendPropertyChanged("FILELOG_ID");
					this.OnFILELOG_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DF_ID", DbType="Int NOT NULL")]
		public int DF_ID
		{
			get
			{
				return this._DF_ID;
			}
			set
			{
				if ((this._DF_ID != value))
				{
					if (this._DATAFILE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDF_IDChanging(value);
					this.SendPropertyChanging();
					this._DF_ID = value;
					this.SendPropertyChanged("DF_ID");
					this.OnDF_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_APPUSER_ID", DbType="Int NOT NULL")]
		public int APPUSER_ID
		{
			get
			{
				return this._APPUSER_ID;
			}
			set
			{
				if ((this._APPUSER_ID != value))
				{
					if (this._APPUSER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAPPUSER_IDChanging(value);
					this.SendPropertyChanging();
					this._APPUSER_ID = value;
					this.SendPropertyChanged("APPUSER_ID");
					this.OnAPPUSER_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LOG_DATE", DbType="DateTime NOT NULL")]
		public System.DateTime LOG_DATE
		{
			get
			{
				return this._LOG_DATE;
			}
			set
			{
				if ((this._LOG_DATE != value))
				{
					this.OnLOG_DATEChanging(value);
					this.SendPropertyChanging();
					this._LOG_DATE = value;
					this.SendPropertyChanged("LOG_DATE");
					this.OnLOG_DATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LOG_TIME", DbType="DateTime NOT NULL")]
		public System.DateTime LOG_TIME
		{
			get
			{
				return this._LOG_TIME;
			}
			set
			{
				if ((this._LOG_TIME != value))
				{
					this.OnLOG_TIMEChanging(value);
					this.SendPropertyChanging();
					this._LOG_TIME = value;
					this.SendPropertyChanged("LOG_TIME");
					this.OnLOG_TIMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TTYPE_ID", DbType="Int NOT NULL")]
		public int TTYPE_ID
		{
			get
			{
				return this._TTYPE_ID;
			}
			set
			{
				if ((this._TTYPE_ID != value))
				{
					if (this._TRANSACTIONTYPE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTTYPE_IDChanging(value);
					this.SendPropertyChanging();
					this._TTYPE_ID = value;
					this.SendPropertyChanged("TTYPE_ID");
					this.OnTTYPE_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="APPUSER_FILELOG", Storage="_APPUSER", ThisKey="APPUSER_ID", OtherKey="APPUSER_ID", IsForeignKey=true)]
		public APPUSER APPUSER
		{
			get
			{
				return this._APPUSER.Entity;
			}
			set
			{
				APPUSER previousValue = this._APPUSER.Entity;
				if (((previousValue != value) 
							|| (this._APPUSER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._APPUSER.Entity = null;
						previousValue.FILELOGs.Remove(this);
					}
					this._APPUSER.Entity = value;
					if ((value != null))
					{
						value.FILELOGs.Add(this);
						this._APPUSER_ID = value.APPUSER_ID;
					}
					else
					{
						this._APPUSER_ID = default(int);
					}
					this.SendPropertyChanged("APPUSER");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TRANSACTIONTYPE_FILELOG", Storage="_TRANSACTIONTYPE", ThisKey="TTYPE_ID", OtherKey="TTYPE_ID", IsForeignKey=true)]
		public TRANSACTIONTYPE TRANSACTIONTYPE
		{
			get
			{
				return this._TRANSACTIONTYPE.Entity;
			}
			set
			{
				TRANSACTIONTYPE previousValue = this._TRANSACTIONTYPE.Entity;
				if (((previousValue != value) 
							|| (this._TRANSACTIONTYPE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TRANSACTIONTYPE.Entity = null;
						previousValue.FILELOGs.Remove(this);
					}
					this._TRANSACTIONTYPE.Entity = value;
					if ((value != null))
					{
						value.FILELOGs.Add(this);
						this._TTYPE_ID = value.TTYPE_ID;
					}
					else
					{
						this._TTYPE_ID = default(int);
					}
					this.SendPropertyChanged("TRANSACTIONTYPE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DATAFILE_FILELOG", Storage="_DATAFILE", ThisKey="DF_ID", OtherKey="DF_ID", IsForeignKey=true)]
		public DATAFILE DATAFILE
		{
			get
			{
				return this._DATAFILE.Entity;
			}
			set
			{
				DATAFILE previousValue = this._DATAFILE.Entity;
				if (((previousValue != value) 
							|| (this._DATAFILE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DATAFILE.Entity = null;
						previousValue.FILELOGs.Remove(this);
					}
					this._DATAFILE.Entity = value;
					if ((value != null))
					{
						value.FILELOGs.Add(this);
						this._DF_ID = value.DF_ID;
					}
					else
					{
						this._DF_ID = default(int);
					}
					this.SendPropertyChanged("DATAFILE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TAG")]
	public partial class TAG : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TAG_ID;
		
		private string _TAG_NAME;
		
		private System.Nullable<bool> _IS_ACTIVE;
		
		private EntitySet<FILE_TAG> _FILE_TAGs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTAG_IDChanging(int value);
    partial void OnTAG_IDChanged();
    partial void OnTAG_NAMEChanging(string value);
    partial void OnTAG_NAMEChanged();
    partial void OnIS_ACTIVEChanging(System.Nullable<bool> value);
    partial void OnIS_ACTIVEChanged();
    #endregion
		
		public TAG()
		{
			this._FILE_TAGs = new EntitySet<FILE_TAG>(new Action<FILE_TAG>(this.attach_FILE_TAGs), new Action<FILE_TAG>(this.detach_FILE_TAGs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TAG_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TAG_ID
		{
			get
			{
				return this._TAG_ID;
			}
			set
			{
				if ((this._TAG_ID != value))
				{
					this.OnTAG_IDChanging(value);
					this.SendPropertyChanging();
					this._TAG_ID = value;
					this.SendPropertyChanged("TAG_ID");
					this.OnTAG_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TAG_NAME", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TAG_NAME
		{
			get
			{
				return this._TAG_NAME;
			}
			set
			{
				if ((this._TAG_NAME != value))
				{
					this.OnTAG_NAMEChanging(value);
					this.SendPropertyChanging();
					this._TAG_NAME = value;
					this.SendPropertyChanged("TAG_NAME");
					this.OnTAG_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IS_ACTIVE", DbType="Bit NOT NULL")]
		public System.Nullable<bool> IS_ACTIVE
		{
			get
			{
				return this._IS_ACTIVE;
			}
			set
			{
				if ((this._IS_ACTIVE != value))
				{
					this.OnIS_ACTIVEChanging(value);
					this.SendPropertyChanging();
					this._IS_ACTIVE = value;
					this.SendPropertyChanged("IS_ACTIVE");
					this.OnIS_ACTIVEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TAG_FILE_TAG", Storage="_FILE_TAGs", ThisKey="TAG_ID", OtherKey="TAG_ID")]
		public EntitySet<FILE_TAG> FILE_TAGs
		{
			get
			{
				return this._FILE_TAGs;
			}
			set
			{
				this._FILE_TAGs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FILE_TAGs(FILE_TAG entity)
		{
			this.SendPropertyChanging();
			entity.TAG = this;
		}
		
		private void detach_FILE_TAGs(FILE_TAG entity)
		{
			this.SendPropertyChanging();
			entity.TAG = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DATAFILE")]
	public partial class DATAFILE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DF_ID;
		
		private string _FILE_NAME;
		
		private int _EXTENSION_ID;
		
		private string _SHORT_DESC;
		
		private string _LONG_DESC;
		
		private System.Nullable<bool> _IS_ACTIVE;
		
		private EntitySet<FILE_TAG> _FILE_TAGs;
		
		private EntitySet<FILELOG> _FILELOGs;
		
		private EntityRef<EXTENSION> _EXTENSION;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDF_IDChanging(int value);
    partial void OnDF_IDChanged();
    partial void OnFILE_NAMEChanging(string value);
    partial void OnFILE_NAMEChanged();
    partial void OnEXTENSION_IDChanging(int value);
    partial void OnEXTENSION_IDChanged();
    partial void OnSHORT_DESCChanging(string value);
    partial void OnSHORT_DESCChanged();
    partial void OnLONG_DESCChanging(string value);
    partial void OnLONG_DESCChanged();
    partial void OnIS_ACTIVEChanging(System.Nullable<bool> value);
    partial void OnIS_ACTIVEChanged();
    #endregion
		
		public DATAFILE()
		{
			this._FILE_TAGs = new EntitySet<FILE_TAG>(new Action<FILE_TAG>(this.attach_FILE_TAGs), new Action<FILE_TAG>(this.detach_FILE_TAGs));
			this._FILELOGs = new EntitySet<FILELOG>(new Action<FILELOG>(this.attach_FILELOGs), new Action<FILELOG>(this.detach_FILELOGs));
			this._EXTENSION = default(EntityRef<EXTENSION>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DF_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DF_ID
		{
			get
			{
				return this._DF_ID;
			}
			set
			{
				if ((this._DF_ID != value))
				{
					if (this._EXTENSION.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDF_IDChanging(value);
					this.SendPropertyChanging();
					this._DF_ID = value;
					this.SendPropertyChanged("DF_ID");
					this.OnDF_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FILE_NAME", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FILE_NAME
		{
			get
			{
				return this._FILE_NAME;
			}
			set
			{
				if ((this._FILE_NAME != value))
				{
					this.OnFILE_NAMEChanging(value);
					this.SendPropertyChanging();
					this._FILE_NAME = value;
					this.SendPropertyChanged("FILE_NAME");
					this.OnFILE_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EXTENSION_ID", DbType="Int NOT NULL")]
		public int EXTENSION_ID
		{
			get
			{
				return this._EXTENSION_ID;
			}
			set
			{
				if ((this._EXTENSION_ID != value))
				{
					this.OnEXTENSION_IDChanging(value);
					this.SendPropertyChanging();
					this._EXTENSION_ID = value;
					this.SendPropertyChanged("EXTENSION_ID");
					this.OnEXTENSION_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SHORT_DESC", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SHORT_DESC
		{
			get
			{
				return this._SHORT_DESC;
			}
			set
			{
				if ((this._SHORT_DESC != value))
				{
					this.OnSHORT_DESCChanging(value);
					this.SendPropertyChanging();
					this._SHORT_DESC = value;
					this.SendPropertyChanged("SHORT_DESC");
					this.OnSHORT_DESCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LONG_DESC", DbType="VarChar(50)")]
		public string LONG_DESC
		{
			get
			{
				return this._LONG_DESC;
			}
			set
			{
				if ((this._LONG_DESC != value))
				{
					this.OnLONG_DESCChanging(value);
					this.SendPropertyChanging();
					this._LONG_DESC = value;
					this.SendPropertyChanged("LONG_DESC");
					this.OnLONG_DESCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IS_ACTIVE", DbType="Bit")]
		public System.Nullable<bool> IS_ACTIVE
		{
			get
			{
				return this._IS_ACTIVE;
			}
			set
			{
				if ((this._IS_ACTIVE != value))
				{
					this.OnIS_ACTIVEChanging(value);
					this.SendPropertyChanging();
					this._IS_ACTIVE = value;
					this.SendPropertyChanged("IS_ACTIVE");
					this.OnIS_ACTIVEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DATAFILE_FILE_TAG", Storage="_FILE_TAGs", ThisKey="DF_ID", OtherKey="DF_ID")]
		public EntitySet<FILE_TAG> FILE_TAGs
		{
			get
			{
				return this._FILE_TAGs;
			}
			set
			{
				this._FILE_TAGs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DATAFILE_FILELOG", Storage="_FILELOGs", ThisKey="DF_ID", OtherKey="DF_ID")]
		public EntitySet<FILELOG> FILELOGs
		{
			get
			{
				return this._FILELOGs;
			}
			set
			{
				this._FILELOGs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EXTENSION_DATAFILE", Storage="_EXTENSION", ThisKey="DF_ID", OtherKey="EXTENSION_ID", IsForeignKey=true)]
		public EXTENSION EXTENSION
		{
			get
			{
				return this._EXTENSION.Entity;
			}
			set
			{
				EXTENSION previousValue = this._EXTENSION.Entity;
				if (((previousValue != value) 
							|| (this._EXTENSION.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EXTENSION.Entity = null;
						previousValue.DATAFILE = null;
					}
					this._EXTENSION.Entity = value;
					if ((value != null))
					{
						value.DATAFILE = this;
						this._DF_ID = value.EXTENSION_ID;
					}
					else
					{
						this._DF_ID = default(int);
					}
					this.SendPropertyChanged("EXTENSION");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FILE_TAGs(FILE_TAG entity)
		{
			this.SendPropertyChanging();
			entity.DATAFILE = this;
		}
		
		private void detach_FILE_TAGs(FILE_TAG entity)
		{
			this.SendPropertyChanging();
			entity.DATAFILE = null;
		}
		
		private void attach_FILELOGs(FILELOG entity)
		{
			this.SendPropertyChanging();
			entity.DATAFILE = this;
		}
		
		private void detach_FILELOGs(FILELOG entity)
		{
			this.SendPropertyChanging();
			entity.DATAFILE = null;
		}
	}
}
#pragma warning restore 1591
